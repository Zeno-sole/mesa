From ae40c317f0dee63b5821faf677c6c20c9ec49f8f Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Fri, 3 Nov 2023 12:57:09 +0800
Subject: [PATCH] llvmpipe: add LoongArch support in ORCJIT

Currently set CPU features based on softdev convention.

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
---
 .../auxiliary/gallivm/lp_bld_init_orc.cpp     | 24 ++++++++++++++++++-
 src/util/detect_arch.h                        | 12 ++++++++++
 2 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_init_orc.cpp b/src/gallium/auxiliary/gallivm/lp_bld_init_orc.cpp
index 758a8bb61c5db..fbb2d85ddfba3 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_init_orc.cpp
+++ b/src/gallium/auxiliary/gallivm/lp_bld_init_orc.cpp
@@ -48,7 +48,7 @@
 /* conflict with ObjectLinkingLayer.h */
 #include "util/u_memory.h"
 
-#if DETECT_ARCH_RISCV64 == 1 || DETECT_ARCH_RISCV32 == 1 || (defined(_WIN32) && LLVM_VERSION_MAJOR >= 15)
+#if DETECT_ARCH_RISCV64 == 1 || DETECT_ARCH_RISCV32 == 1 || DETECT_ARCH_LOONGARCH64 == 1 || (defined(_WIN32) && LLVM_VERSION_MAJOR >= 15)
 /* use ObjectLinkingLayer (JITLINK backend) */
 #define USE_JITLINK
 #endif
@@ -560,6 +560,14 @@ llvm::orc::JITTargetMachineBuilder LPJit::create_jtdb() {
 #else
 #error "GALLIVM: unknown target riscv float abi"
 #endif
+#endif
+
+#if DETECT_ARCH_LOONGARCH64 == 1
+#if defined(__loongarch_lp64) && defined(__loongarch_double_float)
+   options.MCOptions.ABIName = "lp64d";
+#else
+#error "GALLIVM: unknown target loongarch float abi"
+#endif
 #endif
 
    JTMB.setOptions(options);
@@ -668,6 +676,20 @@ llvm::orc::JITTargetMachineBuilder LPJit::create_jtdb() {
    MAttrs = {"+m","+c","+a","+d","+f"};
 #endif
 
+#if DETECT_ARCH_LOONGARCH64 == 1
+   /*
+    * TODO: Implement util_get_cpu_caps()
+    *
+    * No FPU-less LoongArch64 systems are ever shipped yet, and LP64D is
+    * the default ABI, so FPU is enabled here.
+    *
+    * The Software development convention defaults to have "128-bit
+    * vector", so LSX is enabled here, see
+    * https://github.com/loongson/la-softdev-convention/releases/download/v0.1/la-softdev-convention.pdf
+    */
+   MAttrs = {"+f","+d","+lsx"};
+#endif
+
    JTMB.addFeatures(MAttrs);
 
    if (::gallivm_debug & (GALLIVM_DEBUG_IR | GALLIVM_DEBUG_ASM | GALLIVM_DEBUG_DUMP_BC)) {
diff --git a/src/util/detect_arch.h b/src/util/detect_arch.h
index 34b650734127f..656e794054ad5 100644
--- a/src/util/detect_arch.h
+++ b/src/util/detect_arch.h
@@ -108,6 +108,14 @@
 #endif
 #endif
 
+#if defined(__loongarch__)
+#if __loongarch_grlen == 64
+#define DETECT_ARCH_LOONGARCH64 1
+#else
+#error "pipe: unknown target loongarch grlen"
+#endif
+#endif
+
 #ifndef DETECT_ARCH_X86
 #define DETECT_ARCH_X86 0
 #endif
@@ -160,4 +168,8 @@
 #define DETECT_ARCH_RISCV64 0
 #endif
 
+#ifndef DETECT_ARCH_LOONGARCH64
+#define DETECT_ARCH_LOONGARCH64 0
+#endif
+
 #endif /* UTIL_DETECT_ARCH_H_ */
-- 
GitLab

